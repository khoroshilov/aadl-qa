--------------------------------------------------------
--! File generated by asn2aadl v1.2160: DO NOT EDIT !
--------------------------------------------------------

package DataView

public

  with Data_Model;
  with Taste;
  with Base_Types;
  with Deployment;
-- No more private heap required (we use the space certified compiler)
-- Memory_Required: 0


data Stream_Element_Buffer
    -- Root type for buffer elements
properties
    Data_Model::Data_Representation => Character;
end Stream_Element_Buffer;
DATA Ni_660x_Output
PROPERTIES
    -- name of the ASN.1 source file:
    Source_Text => ("dataview.asn");
    TASTE::Ada_Package_Name => "DataView";
    Deployment::ASN1_Module_Name => "DataView";
    Source_Language => ASN1;
    -- Size of a buffer to cover all forms of message representation:
    -- Real message size is 8; suggested aligned message buffer is...
    Source_Data_Size => 8 Bytes;
    -- name of the corresponding data type in the source file:
    Type_Source_Name => "Ni-660x-Output";
    -- what kind of type is this?
    TASTE::ASN1_Basic_Type =>aINTEGER;
END Ni_660x_Output;

DATA Ni_660x_Output_Buffer_Max
END Ni_660x_Output_Buffer_Max;

DATA IMPLEMENTATION Ni_660x_Output_Buffer_Max.impl
    -- Buffer to hold a marshalled data of type Ni_660x_Output
PROPERTIES
    Data_Model::Data_Representation => array;
    Data_Model::Dimension => (8); -- Size of the buffer
    Data_Model::Base_Type => (classifier (DataView::Stream_Element_Buffer));
END Ni_660x_Output_Buffer_Max.impl;

DATA Ni_660x_Output_Buffer
END Ni_660x_Output_Buffer;

DATA IMPLEMENTATION Ni_660x_Output_Buffer.impl
    -- Buffer to hold a marshalled data of type Ni_660x_Output
SUBCOMPONENTS
    Buffer : data Ni_660x_Output_Buffer_Max.impl;
    Length : data Base_Types::Unsigned_16;
PROPERTIES
    Data_Model::Data_Representation => Struct;
END Ni_660x_Output_Buffer.impl;

DATA NI670x_Input
PROPERTIES
    -- name of the ASN.1 source file:
    Source_Text => ("dataview.asn");
    TASTE::Ada_Package_Name => "DataView";
    Deployment::ASN1_Module_Name => "DataView";
    Source_Language => ASN1;
    -- Size of a buffer to cover all forms of message representation:
    -- Real message size is 16; suggested aligned message buffer is...
    Source_Data_Size => 16 Bytes;
    -- name of the corresponding data type in the source file:
    Type_Source_Name => "NI670x-Input";
    -- what kind of type is this?
    TASTE::ASN1_Basic_Type =>aSEQUENCE;
END NI670x_Input;

DATA NI670x_Input_Buffer_Max
END NI670x_Input_Buffer_Max;

DATA IMPLEMENTATION NI670x_Input_Buffer_Max.impl
    -- Buffer to hold a marshalled data of type NI670x_Input
PROPERTIES
    Data_Model::Data_Representation => array;
    Data_Model::Dimension => (16); -- Size of the buffer
    Data_Model::Base_Type => (classifier (DataView::Stream_Element_Buffer));
END NI670x_Input_Buffer_Max.impl;

DATA NI670x_Input_Buffer
END NI670x_Input_Buffer;

DATA IMPLEMENTATION NI670x_Input_Buffer.impl
    -- Buffer to hold a marshalled data of type NI670x_Input
SUBCOMPONENTS
    Buffer : data NI670x_Input_Buffer_Max.impl;
    Length : data Base_Types::Unsigned_16;
PROPERTIES
    Data_Model::Data_Representation => Struct;
END NI670x_Input_Buffer.impl;

DATA NI670x_Voltage
PROPERTIES
    -- name of the ASN.1 source file:
    Source_Text => ("dataview.asn");
    TASTE::Ada_Package_Name => "DataView";
    Deployment::ASN1_Module_Name => "DataView";
    Source_Language => ASN1;
    -- Size of a buffer to cover all forms of message representation:
    -- Real message size is 13; suggested aligned message buffer is...
    Source_Data_Size => 16 Bytes;
    -- name of the corresponding data type in the source file:
    Type_Source_Name => "NI670x-Voltage";
    -- what kind of type is this?
    TASTE::ASN1_Basic_Type =>aREAL;
END NI670x_Voltage;

DATA NI670x_Voltage_Buffer_Max
END NI670x_Voltage_Buffer_Max;

DATA IMPLEMENTATION NI670x_Voltage_Buffer_Max.impl
    -- Buffer to hold a marshalled data of type NI670x_Voltage
PROPERTIES
    Data_Model::Data_Representation => array;
    Data_Model::Dimension => (16); -- Size of the buffer
    Data_Model::Base_Type => (classifier (DataView::Stream_Element_Buffer));
END NI670x_Voltage_Buffer_Max.impl;

DATA NI670x_Voltage_Buffer
END NI670x_Voltage_Buffer;

DATA IMPLEMENTATION NI670x_Voltage_Buffer.impl
    -- Buffer to hold a marshalled data of type NI670x_Voltage
SUBCOMPONENTS
    Buffer : data NI670x_Voltage_Buffer_Max.impl;
    Length : data Base_Types::Unsigned_16;
PROPERTIES
    Data_Model::Data_Representation => Struct;
END NI670x_Voltage_Buffer.impl;

DATA NI670x_Channel
PROPERTIES
    -- name of the ASN.1 source file:
    Source_Text => ("dataview.asn");
    TASTE::Ada_Package_Name => "DataView";
    Deployment::ASN1_Module_Name => "DataView";
    Source_Language => ASN1;
    -- Size of a buffer to cover all forms of message representation:
    -- Real message size is 8; suggested aligned message buffer is...
    Source_Data_Size => 8 Bytes;
    -- name of the corresponding data type in the source file:
    Type_Source_Name => "NI670x-Channel";
    -- what kind of type is this?
    TASTE::ASN1_Basic_Type =>aINTEGER;
END NI670x_Channel;

DATA NI670x_Channel_Buffer_Max
END NI670x_Channel_Buffer_Max;

DATA IMPLEMENTATION NI670x_Channel_Buffer_Max.impl
    -- Buffer to hold a marshalled data of type NI670x_Channel
PROPERTIES
    Data_Model::Data_Representation => array;
    Data_Model::Dimension => (8); -- Size of the buffer
    Data_Model::Base_Type => (classifier (DataView::Stream_Element_Buffer));
END NI670x_Channel_Buffer_Max.impl;

DATA NI670x_Channel_Buffer
END NI670x_Channel_Buffer;

DATA IMPLEMENTATION NI670x_Channel_Buffer.impl
    -- Buffer to hold a marshalled data of type NI670x_Channel
SUBCOMPONENTS
    Buffer : data NI670x_Channel_Buffer_Max.impl;
    Length : data Base_Types::Unsigned_16;
PROPERTIES
    Data_Model::Data_Representation => Struct;
END NI670x_Channel_Buffer.impl;

end DataView;
